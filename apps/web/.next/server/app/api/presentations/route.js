/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/presentations/route";
exports.ids = ["app/api/presentations/route"];
exports.modules = {

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpresentations%2Froute&page=%2Fapi%2Fpresentations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpresentations%2Froute.ts&appDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpresentations%2Froute&page=%2Fapi%2Fpresentations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpresentations%2Froute.ts&appDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/../../node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/../../node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/../../node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/../../node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/../../node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/../../node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/../../node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/../../node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/../../node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_azeta_Documents_Projects_speakdeck_build_apps_web_app_api_presentations_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/presentations/route.ts */ \"(rsc)/./app/api/presentations/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/presentations/route\",\n        pathname: \"/api/presentations\",\n        filename: \"route\",\n        bundlePath: \"app/api/presentations/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\azeta\\\\Documents\\\\Projects\\\\speakdeck-build\\\\apps\\\\web\\\\app\\\\api\\\\presentations\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_azeta_Documents_Projects_speakdeck_build_apps_web_app_api_presentations_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/presentations/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpresentations%2Froute&page=%2Fapi%2Fpresentations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpresentations%2Froute.ts&appDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/../../packages/shared/src/constants/app.ts":
/*!**************************************************!*\
  !*** ../../packages/shared/src/constants/app.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_SERVICES: () => (/* binding */ AI_SERVICES),\n/* harmony export */   APP_CONFIG: () => (/* binding */ APP_CONFIG),\n/* harmony export */   FALLBACK_TOPICS: () => (/* binding */ FALLBACK_TOPICS),\n/* harmony export */   PRESENTATION_STATUS: () => (/* binding */ PRESENTATION_STATUS)\n/* harmony export */ });\nconst APP_CONFIG = {\n    PRESENTATION: {\n        MIN_SLIDES: 3,\n        MAX_SLIDES: 5,\n        MAX_TITLE_LENGTH: 100,\n        MAX_CONTENT_LENGTH: 500\n    },\n    GENERATION: {\n        TIMEOUT_MS: 60000,\n        PROGRESS_UPDATE_INTERVAL_MS: 1000\n    },\n    API: {\n        RATE_LIMIT_PER_MINUTE: 10,\n        MAX_RETRIES: 3,\n        RETRY_DELAY_MS: 1000\n    },\n    STORAGE: {\n        MAX_IMAGE_SIZE_MB: 10,\n        MAX_AUDIO_SIZE_MB: 50,\n        ALLOWED_IMAGE_TYPES: [\n            'image/jpeg',\n            'image/png',\n            'image/webp'\n        ],\n        ALLOWED_AUDIO_TYPES: [\n            'audio/mpeg',\n            'audio/wav',\n            'audio/m4a'\n        ]\n    }\n};\nconst FALLBACK_TOPICS = [\n    'Technology',\n    'Business',\n    'Education',\n    'Science',\n    'Health',\n    'Environment',\n    'Arts',\n    'History'\n];\nconst AI_SERVICES = {\n    GEMINI: 'gemini',\n    NANO_BANANA: 'nano_banana',\n    ELEVEN_LABS: 'eleven_labs'\n};\nconst PRESENTATION_STATUS = {\n    PENDING: 'pending',\n    PROCESSING: 'processing',\n    GENERATING_TEXT: 'generating_text',\n    GENERATING_VISUALS: 'generating_visuals',\n    GENERATING_AUDIO: 'generating_audio',\n    COMPLETED: 'completed',\n    FAILED: 'failed'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy9jb25zdGFudHMvYXBwLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQSxhQUFhO0lBQ3hCQyxjQUFjO1FBQ1pDLFlBQVk7UUFDWkMsWUFBWTtRQUNaQyxrQkFBa0I7UUFDbEJDLG9CQUFvQjtJQUN0QjtJQUNBQyxZQUFZO1FBQ1ZDLFlBQVk7UUFDWkMsNkJBQTZCO0lBQy9CO0lBQ0FDLEtBQUs7UUFDSEMsdUJBQXVCO1FBQ3ZCQyxhQUFhO1FBQ2JDLGdCQUFnQjtJQUNsQjtJQUNBQyxTQUFTO1FBQ1BDLG1CQUFtQjtRQUNuQkMsbUJBQW1CO1FBQ25CQyxxQkFBcUI7WUFBQztZQUFjO1lBQWE7U0FBYTtRQUM5REMscUJBQXFCO1lBQUM7WUFBYztZQUFhO1NBQVk7SUFDL0Q7QUFDRixFQUFXO0FBRUosTUFBTUMsa0JBQWtCO0lBQzdCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRCxDQUFVO0FBRUosTUFBTUMsY0FBYztJQUN6QkMsUUFBUTtJQUNSQyxhQUFhO0lBQ2JDLGFBQWE7QUFDZixFQUFXO0FBRUosTUFBTUMsc0JBQXNCO0lBQ2pDQyxTQUFTO0lBQ1RDLFlBQVk7SUFDWkMsaUJBQWlCO0lBQ2pCQyxvQkFBb0I7SUFDcEJDLGtCQUFrQjtJQUNsQkMsV0FBVztJQUNYQyxRQUFRO0FBQ1YsRUFBVyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxhemV0YVxcRG9jdW1lbnRzXFxQcm9qZWN0c1xcc3BlYWtkZWNrLWJ1aWxkXFxwYWNrYWdlc1xcc2hhcmVkXFxzcmNcXGNvbnN0YW50c1xcYXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBBUFBfQ09ORklHID0ge1xuICBQUkVTRU5UQVRJT046IHtcbiAgICBNSU5fU0xJREVTOiAzLFxuICAgIE1BWF9TTElERVM6IDUsXG4gICAgTUFYX1RJVExFX0xFTkdUSDogMTAwLFxuICAgIE1BWF9DT05URU5UX0xFTkdUSDogNTAwLFxuICB9LFxuICBHRU5FUkFUSU9OOiB7XG4gICAgVElNRU9VVF9NUzogNjAwMDAsIC8vIDYwIHNlY29uZHNcbiAgICBQUk9HUkVTU19VUERBVEVfSU5URVJWQUxfTVM6IDEwMDAsXG4gIH0sXG4gIEFQSToge1xuICAgIFJBVEVfTElNSVRfUEVSX01JTlVURTogMTAsXG4gICAgTUFYX1JFVFJJRVM6IDMsXG4gICAgUkVUUllfREVMQVlfTVM6IDEwMDAsXG4gIH0sXG4gIFNUT1JBR0U6IHtcbiAgICBNQVhfSU1BR0VfU0laRV9NQjogMTAsXG4gICAgTUFYX0FVRElPX1NJWkVfTUI6IDUwLFxuICAgIEFMTE9XRURfSU1BR0VfVFlQRVM6IFsnaW1hZ2UvanBlZycsICdpbWFnZS9wbmcnLCAnaW1hZ2Uvd2VicCddLFxuICAgIEFMTE9XRURfQVVESU9fVFlQRVM6IFsnYXVkaW8vbXBlZycsICdhdWRpby93YXYnLCAnYXVkaW8vbTRhJ10sXG4gIH0sXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgRkFMTEJBQ0tfVE9QSUNTID0gW1xuICAnVGVjaG5vbG9neScsXG4gICdCdXNpbmVzcycsXG4gICdFZHVjYXRpb24nLFxuICAnU2NpZW5jZScsXG4gICdIZWFsdGgnLFxuICAnRW52aXJvbm1lbnQnLFxuICAnQXJ0cycsXG4gICdIaXN0b3J5Jyxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBBSV9TRVJWSUNFUyA9IHtcbiAgR0VNSU5JOiAnZ2VtaW5pJyxcbiAgTkFOT19CQU5BTkE6ICduYW5vX2JhbmFuYScsXG4gIEVMRVZFTl9MQUJTOiAnZWxldmVuX2xhYnMnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFBSRVNFTlRBVElPTl9TVEFUVVMgPSB7XG4gIFBFTkRJTkc6ICdwZW5kaW5nJyxcbiAgUFJPQ0VTU0lORzogJ3Byb2Nlc3NpbmcnLFxuICBHRU5FUkFUSU5HX1RFWFQ6ICdnZW5lcmF0aW5nX3RleHQnLFxuICBHRU5FUkFUSU5HX1ZJU1VBTFM6ICdnZW5lcmF0aW5nX3Zpc3VhbHMnLFxuICBHRU5FUkFUSU5HX0FVRElPOiAnZ2VuZXJhdGluZ19hdWRpbycsXG4gIENPTVBMRVRFRDogJ2NvbXBsZXRlZCcsXG4gIEZBSUxFRDogJ2ZhaWxlZCcsXG59IGFzIGNvbnN0O1xuIl0sIm5hbWVzIjpbIkFQUF9DT05GSUciLCJQUkVTRU5UQVRJT04iLCJNSU5fU0xJREVTIiwiTUFYX1NMSURFUyIsIk1BWF9USVRMRV9MRU5HVEgiLCJNQVhfQ09OVEVOVF9MRU5HVEgiLCJHRU5FUkFUSU9OIiwiVElNRU9VVF9NUyIsIlBST0dSRVNTX1VQREFURV9JTlRFUlZBTF9NUyIsIkFQSSIsIlJBVEVfTElNSVRfUEVSX01JTlVURSIsIk1BWF9SRVRSSUVTIiwiUkVUUllfREVMQVlfTVMiLCJTVE9SQUdFIiwiTUFYX0lNQUdFX1NJWkVfTUIiLCJNQVhfQVVESU9fU0laRV9NQiIsIkFMTE9XRURfSU1BR0VfVFlQRVMiLCJBTExPV0VEX0FVRElPX1RZUEVTIiwiRkFMTEJBQ0tfVE9QSUNTIiwiQUlfU0VSVklDRVMiLCJHRU1JTkkiLCJOQU5PX0JBTkFOQSIsIkVMRVZFTl9MQUJTIiwiUFJFU0VOVEFUSU9OX1NUQVRVUyIsIlBFTkRJTkciLCJQUk9DRVNTSU5HIiwiR0VORVJBVElOR19URVhUIiwiR0VORVJBVElOR19WSVNVQUxTIiwiR0VORVJBVElOR19BVURJTyIsIkNPTVBMRVRFRCIsIkZBSUxFRCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/constants/app.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/shared/src/index.ts":
/*!******************************************!*\
  !*** ../../packages/shared/src/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_SERVICES: () => (/* reexport safe */ _constants_app__WEBPACK_IMPORTED_MODULE_4__.AI_SERVICES),\n/* harmony export */   APP_CONFIG: () => (/* reexport safe */ _constants_app__WEBPACK_IMPORTED_MODULE_4__.APP_CONFIG),\n/* harmony export */   FALLBACK_TOPICS: () => (/* reexport safe */ _constants_app__WEBPACK_IMPORTED_MODULE_4__.FALLBACK_TOPICS),\n/* harmony export */   PRESENTATION_STATUS: () => (/* reexport safe */ _constants_app__WEBPACK_IMPORTED_MODULE_4__.PRESENTATION_STATUS),\n/* harmony export */   createErrorResponse: () => (/* reexport safe */ _utils_api__WEBPACK_IMPORTED_MODULE_6__.createErrorResponse),\n/* harmony export */   createSuccessResponse: () => (/* reexport safe */ _utils_api__WEBPACK_IMPORTED_MODULE_6__.createSuccessResponse),\n/* harmony export */   formatApiError: () => (/* reexport safe */ _utils_api__WEBPACK_IMPORTED_MODULE_6__.formatApiError),\n/* harmony export */   generateRequestId: () => (/* reexport safe */ _utils_api__WEBPACK_IMPORTED_MODULE_6__.generateRequestId),\n/* harmony export */   isApiError: () => (/* reexport safe */ _utils_api__WEBPACK_IMPORTED_MODULE_6__.isApiError),\n/* harmony export */   isValidAudioType: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_5__.isValidAudioType),\n/* harmony export */   isValidImageType: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_5__.isValidImageType),\n/* harmony export */   isValidUrl: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_5__.isValidUrl),\n/* harmony export */   retryWithBackoff: () => (/* reexport safe */ _utils_api__WEBPACK_IMPORTED_MODULE_6__.retryWithBackoff),\n/* harmony export */   sleep: () => (/* reexport safe */ _utils_api__WEBPACK_IMPORTED_MODULE_6__.sleep),\n/* harmony export */   validatePresentationTitle: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_5__.validatePresentationTitle),\n/* harmony export */   validateSlideContent: () => (/* reexport safe */ _utils_validation__WEBPACK_IMPORTED_MODULE_5__.validateSlideContent)\n/* harmony export */ });\n/* harmony import */ var _types_presentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/presentation */ \"(rsc)/../../packages/shared/src/types/presentation.ts\");\n/* harmony import */ var _types_slide__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/slide */ \"(rsc)/../../packages/shared/src/types/slide.ts\");\n/* harmony import */ var _types_fallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/fallback */ \"(rsc)/../../packages/shared/src/types/fallback.ts\");\n/* harmony import */ var _types_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/api */ \"(rsc)/../../packages/shared/src/types/api.ts\");\n/* harmony import */ var _constants_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants/app */ \"(rsc)/../../packages/shared/src/constants/app.ts\");\n/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/validation */ \"(rsc)/../../packages/shared/src/utils/validation.ts\");\n/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/api */ \"(rsc)/../../packages/shared/src/utils/api.ts\");\n// Types\n\n\n\n\n// Constants\n\n// Utils\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFFBQVE7QUFDNkI7QUFDUDtBQUNHO0FBQ0w7QUFFNUIsWUFBWTtBQUNvQjtBQUVoQyxRQUFRO0FBQzJCO0FBQ1AiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYXpldGFcXERvY3VtZW50c1xcUHJvamVjdHNcXHNwZWFrZGVjay1idWlsZFxccGFja2FnZXNcXHNoYXJlZFxcc3JjXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlc1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy9wcmVzZW50YXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy9zbGlkZSc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzL2ZhbGxiYWNrJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMvYXBpJztcblxuLy8gQ29uc3RhbnRzXG5leHBvcnQgKiBmcm9tICcuL2NvbnN0YW50cy9hcHAnO1xuXG4vLyBVdGlsc1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy92YWxpZGF0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvYXBpJztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/index.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/shared/src/types/api.ts":
/*!**********************************************!*\
  !*** ../../packages/shared/src/types/api.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Quota Management\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy90eXBlcy9hcGkudHMiLCJtYXBwaW5ncyI6IjtBQTJDQSxtQkFBbUI7QUFNbEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYXpldGFcXERvY3VtZW50c1xcUHJvamVjdHNcXHNwZWFrZGVjay1idWlsZFxccGFja2FnZXNcXHNoYXJlZFxcc3JjXFx0eXBlc1xcYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgQXBpRXJyb3Ige1xuICBlcnJvcjoge1xuICAgIGNvZGU6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgdGltZXN0YW1wOiBzdHJpbmc7XG4gICAgcmVxdWVzdElkOiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBpU3VjY2Vzc1Jlc3BvbnNlPFQ+IHtcbiAgZGF0YTogVDtcbiAgc3VjY2VzczogdHJ1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcGlFcnJvclJlc3BvbnNlIHtcbiAgZGF0YTogbnVsbDtcbiAgc3VjY2VzczogZmFsc2U7XG4gIGVycm9yOiBBcGlFcnJvclsnZXJyb3InXTtcbn1cblxuZXhwb3J0IHR5cGUgQXBpUmVzcG9uc2U8VD4gPSBBcGlTdWNjZXNzUmVzcG9uc2U8VD4gfCBBcGlFcnJvclJlc3BvbnNlO1xuXG4vLyBBSSBTZXJ2aWNlIEludGVyZmFjZXNcbmV4cG9ydCBpbnRlcmZhY2UgR2VtaW5pUmVzcG9uc2Uge1xuICBzbGlkZXM6IEFycmF5PHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBpbWFnZVByb21wdDogc3RyaW5nO1xuICB9PjtcbiAgdG9rZW5zVXNlZDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hbm9CYW5hbmFSZXNwb25zZSB7XG4gIGltYWdlVXJsOiBzdHJpbmc7XG4gIGNhbGxzVXNlZDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVsZXZlbkxhYnNSZXNwb25zZSB7XG4gIGF1ZGlvVXJsOiBzdHJpbmc7XG4gIGNoYXJhY3RlcnNVc2VkOiBudW1iZXI7XG59XG5cbi8vIFF1b3RhIE1hbmFnZW1lbnRcbmV4cG9ydCBpbnRlcmZhY2UgQXBpUXVvdGFTdGF0dXMge1xuICBzZXJ2aWNlOiAnZ2VtaW5pJyB8ICduYW5vX2JhbmFuYScgfCAnZWxldmVuX2xhYnMnO1xuICByZW1haW5pbmc6IG51bWJlcjtcbiAgdG90YWw6IG51bWJlcjtcbiAgcmVzZXREYXRlPzogRGF0ZTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/types/api.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/shared/src/types/fallback.ts":
/*!***************************************************!*\
  !*** ../../packages/shared/src/types/fallback.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy90eXBlcy9mYWxsYmFjay50cyIsIm1hcHBpbmdzIjoiO0FBZ0JDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGF6ZXRhXFxEb2N1bWVudHNcXFByb2plY3RzXFxzcGVha2RlY2stYnVpbGRcXHBhY2thZ2VzXFxzaGFyZWRcXHNyY1xcdHlwZXNcXGZhbGxiYWNrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgRmFsbGJhY2tEZWNrIHtcbiAgaWQ6IHN0cmluZztcbiAgdG9waWM6IHN0cmluZzsgLy8gZS5nLiwgXCJUZWNobm9sb2d5XCIsIFwiQnVzaW5lc3NcIiwgXCJFZHVjYXRpb25cIlxuICB0aXRsZTogc3RyaW5nO1xuICBzbGlkZXM6IEZhbGxiYWNrU2xpZGVbXTtcbiAgaXNBY3RpdmU6IGJvb2xlYW47XG4gIHVzYWdlQ291bnQ6IG51bWJlcjtcbiAgY3JlYXRlZEF0OiBEYXRlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZhbGxiYWNrU2xpZGUge1xuICBzbGlkZU51bWJlcjogbnVtYmVyO1xuICB0aXRsZTogc3RyaW5nO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIGltYWdlVXJsOiBzdHJpbmc7IC8vIFByZS1zdG9yZWQgaW4gU3VwYWJhc2UgU3RvcmFnZVxuICBhdWRpb1VybDogc3RyaW5nOyAvLyBQcmUtc3RvcmVkIGluIFN1cGFiYXNlIFN0b3JhZ2Vcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/types/fallback.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/shared/src/types/presentation.ts":
/*!*******************************************************!*\
  !*** ../../packages/shared/src/types/presentation.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy90eXBlcy9wcmVzZW50YXRpb24udHMiLCJtYXBwaW5ncyI6IjtBQWtDQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxhemV0YVxcRG9jdW1lbnRzXFxQcm9qZWN0c1xcc3BlYWtkZWNrLWJ1aWxkXFxwYWNrYWdlc1xcc2hhcmVkXFxzcmNcXHR5cGVzXFxwcmVzZW50YXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2xpZGUgfSBmcm9tICcuL3NsaWRlJztcblxuZXhwb3J0IGludGVyZmFjZSBQcmVzZW50YXRpb24ge1xuICBpZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBzdGF0dXM6ICdwZW5kaW5nJyB8ICdwcm9jZXNzaW5nJyB8ICdnZW5lcmF0aW5nX3RleHQnIHwgJ2dlbmVyYXRpbmdfdmlzdWFscycgfCAnZ2VuZXJhdGluZ19hdWRpbycgfCAnY29tcGxldGVkJyB8ICdmYWlsZWQnO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIHVwZGF0ZWRBdDogRGF0ZTtcbiAgdXNlcklkPzogc3RyaW5nOyAvLyBPcHRpb25hbCBmb3IgTVZQXG4gIHNsaWRlczogU2xpZGVbXTtcbiAgdG90YWxTbGlkZXM6IG51bWJlcjtcbiAgZ2VuZXJhdGlvblRpbWVNcz86IG51bWJlcjtcbiAgZXJyb3JNZXNzYWdlPzogc3RyaW5nO1xuICBtZXRhZGF0YToge1xuICAgIGdlbWluaVRva2Vuc1VzZWQ/OiBudW1iZXI7XG4gICAgbmFub0JhbmFuYUNhbGxzVXNlZD86IG51bWJlcjtcbiAgICBlbGV2ZW5MYWJzQ2hhcmFjdGVyc1VzZWQ/OiBudW1iZXI7XG4gICAgaXNGYWxsYmFjaz86IGJvb2xlYW47XG4gICAgZmFsbGJhY2tEZWNrSWQ/OiBzdHJpbmc7XG4gICAgZmFsbGJhY2tSZWFzb24/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2VudGF0aW9uSW5wdXQge1xuICB0aXRsZTogc3RyaW5nO1xuICB1c2VySWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2VudGF0aW9uUHJvZ3Jlc3Mge1xuICBwcmVzZW50YXRpb25JZDogc3RyaW5nO1xuICBzdGF0dXM6IFByZXNlbnRhdGlvblsnc3RhdHVzJ107XG4gIHByb2dyZXNzOiBudW1iZXI7IC8vIDAtMTAwXG4gIGN1cnJlbnRTdGVwOiBzdHJpbmc7XG4gIGVzdGltYXRlZFRpbWVSZW1haW5pbmc/OiBudW1iZXI7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/types/presentation.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/shared/src/types/slide.ts":
/*!************************************************!*\
  !*** ../../packages/shared/src/types/slide.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy90eXBlcy9zbGlkZS50cyIsIm1hcHBpbmdzIjoiO0FBMEJDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGF6ZXRhXFxEb2N1bWVudHNcXFByb2plY3RzXFxzcGVha2RlY2stYnVpbGRcXHBhY2thZ2VzXFxzaGFyZWRcXHNyY1xcdHlwZXNcXHNsaWRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU2xpZGUge1xuICBpZDogc3RyaW5nO1xuICBwcmVzZW50YXRpb25JZDogc3RyaW5nO1xuICBzbGlkZU51bWJlcjogbnVtYmVyO1xuICB0aXRsZTogc3RyaW5nO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIGltYWdlVXJsPzogc3RyaW5nO1xuICBhdWRpb1VybD86IHN0cmluZztcbiAgZ2VuZXJhdGlvblN0YXR1czoge1xuICAgIHRleHQ6ICdwZW5kaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XG4gICAgaW1hZ2U6ICdwZW5kaW5nJyB8ICdwcm9jZXNzaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XG4gICAgYXVkaW86ICdwZW5kaW5nJyB8ICdwcm9jZXNzaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XG4gIH07XG4gIGFpUHJvbXB0czoge1xuICAgIGltYWdlUHJvbXB0Pzogc3RyaW5nO1xuICAgIGF1ZGlvU2NyaXB0Pzogc3RyaW5nO1xuICB9O1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIHVwZGF0ZWRBdDogRGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTbGlkZUlucHV0IHtcbiAgcHJlc2VudGF0aW9uSWQ6IHN0cmluZztcbiAgc2xpZGVOdW1iZXI6IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgY29udGVudDogc3RyaW5nO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/types/slide.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/shared/src/utils/api.ts":
/*!**********************************************!*\
  !*** ../../packages/shared/src/utils/api.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createErrorResponse: () => (/* binding */ createErrorResponse),\n/* harmony export */   createSuccessResponse: () => (/* binding */ createSuccessResponse),\n/* harmony export */   formatApiError: () => (/* binding */ formatApiError),\n/* harmony export */   generateRequestId: () => (/* binding */ generateRequestId),\n/* harmony export */   isApiError: () => (/* binding */ isApiError),\n/* harmony export */   retryWithBackoff: () => (/* binding */ retryWithBackoff),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var _constants_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/app */ \"(rsc)/../../packages/shared/src/constants/app.ts\");\n\nconst createSuccessResponse = (data)=>({\n        data,\n        success: true\n    });\nconst createErrorResponse = (code, message, details)=>({\n        data: null,\n        success: false,\n        error: {\n            code,\n            message,\n            details,\n            timestamp: new Date().toISOString(),\n            requestId: generateRequestId()\n        }\n    });\nconst generateRequestId = ()=>{\n    return `req_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n};\nconst sleep = (ms)=>{\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n};\nconst retryWithBackoff = async (fn, maxRetries = _constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.API.MAX_RETRIES, baseDelay = _constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.API.RETRY_DELAY_MS)=>{\n    let lastError = null;\n    for(let attempt = 0; attempt <= maxRetries; attempt++){\n        try {\n            return await fn();\n        } catch (error) {\n            lastError = error instanceof Error ? error : new Error('Unknown error');\n            if (attempt === maxRetries) {\n                throw lastError;\n            }\n            // Exponential backoff with jitter\n            const delay = baseDelay * Math.pow(2, attempt) + Math.random() * 1000;\n            await sleep(delay);\n        }\n    }\n    throw lastError;\n};\nconst isApiError = (error)=>{\n    return error && typeof error.error === 'object' && 'code' in error.error;\n};\nconst formatApiError = (error)=>{\n    if (isApiError(error)) {\n        return error.error.message;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return 'An unknown error occurred';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy91dGlscy9hcGkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDOEM7QUFFdkMsTUFBTUMsd0JBQXdCLENBQUlDLE9BQW9DO1FBQzNFQTtRQUNBQyxTQUFTO0lBQ1gsR0FBRztBQUVJLE1BQU1DLHNCQUFzQixDQUNqQ0MsTUFDQUMsU0FDQUMsVUFDc0I7UUFDdEJMLE1BQU07UUFDTkMsU0FBUztRQUNUSyxPQUFPO1lBQ0xIO1lBQ0FDO1lBQ0FDO1lBQ0FFLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztZQUNqQ0MsV0FBV0M7UUFDYjtJQUNGLEdBQUc7QUFFSSxNQUFNQSxvQkFBb0I7SUFDL0IsT0FBTyxDQUFDLElBQUksRUFBRUgsS0FBS0ksR0FBRyxHQUFHLENBQUMsRUFBRUMsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLElBQUk7QUFDdkUsRUFBRTtBQUVLLE1BQU1DLFFBQVEsQ0FBQ0M7SUFDcEIsT0FBTyxJQUFJQyxRQUFRQyxDQUFBQSxVQUFXQyxXQUFXRCxTQUFTRjtBQUNwRCxFQUFFO0FBRUssTUFBTUksbUJBQW1CLE9BQzlCQyxJQUNBQyxhQUFxQjFCLHNEQUFVQSxDQUFDMkIsR0FBRyxDQUFDQyxXQUFXLEVBQy9DQyxZQUFvQjdCLHNEQUFVQSxDQUFDMkIsR0FBRyxDQUFDRyxjQUFjO0lBRWpELElBQUlDLFlBQTBCO0lBRTlCLElBQUssSUFBSUMsVUFBVSxHQUFHQSxXQUFXTixZQUFZTSxVQUFXO1FBQ3RELElBQUk7WUFDRixPQUFPLE1BQU1QO1FBQ2YsRUFBRSxPQUFPakIsT0FBTztZQUNkdUIsWUFBWXZCLGlCQUFpQnlCLFFBQVF6QixRQUFRLElBQUl5QixNQUFNO1lBRXZELElBQUlELFlBQVlOLFlBQVk7Z0JBQzFCLE1BQU1LO1lBQ1I7WUFFQSxrQ0FBa0M7WUFDbEMsTUFBTUcsUUFBUUwsWUFBWWQsS0FBS29CLEdBQUcsQ0FBQyxHQUFHSCxXQUFXakIsS0FBS0MsTUFBTSxLQUFLO1lBQ2pFLE1BQU1HLE1BQU1lO1FBQ2Q7SUFDRjtJQUVBLE1BQU1IO0FBQ1IsRUFBRTtBQUVLLE1BQU1LLGFBQWEsQ0FBQzVCO0lBQ3pCLE9BQU9BLFNBQVMsT0FBT0EsTUFBTUEsS0FBSyxLQUFLLFlBQVksVUFBVUEsTUFBTUEsS0FBSztBQUMxRSxFQUFFO0FBRUssTUFBTTZCLGlCQUFpQixDQUFDN0I7SUFDN0IsSUFBSTRCLFdBQVc1QixRQUFRO1FBQ3JCLE9BQU9BLE1BQU1BLEtBQUssQ0FBQ0YsT0FBTztJQUM1QjtJQUVBLElBQUlFLGlCQUFpQnlCLE9BQU87UUFDMUIsT0FBT3pCLE1BQU1GLE9BQU87SUFDdEI7SUFFQSxPQUFPO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxhemV0YVxcRG9jdW1lbnRzXFxQcm9qZWN0c1xcc3BlYWtkZWNrLWJ1aWxkXFxwYWNrYWdlc1xcc2hhcmVkXFxzcmNcXHV0aWxzXFxhcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpRXJyb3IsIEFwaVJlc3BvbnNlLCBBcGlFcnJvclJlc3BvbnNlLCBBcGlTdWNjZXNzUmVzcG9uc2UgfSBmcm9tICcuLi90eXBlcy9hcGknO1xuaW1wb3J0IHsgQVBQX0NPTkZJRyB9IGZyb20gJy4uL2NvbnN0YW50cy9hcHAnO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlID0gPFQ+KGRhdGE6IFQpOiBBcGlTdWNjZXNzUmVzcG9uc2U8VD4gPT4gKHtcbiAgZGF0YSxcbiAgc3VjY2VzczogdHJ1ZSxcbn0pO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRXJyb3JSZXNwb25zZSA9IChcbiAgY29kZTogc3RyaW5nLFxuICBtZXNzYWdlOiBzdHJpbmcsXG4gIGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4pOiBBcGlFcnJvclJlc3BvbnNlID0+ICh7XG4gIGRhdGE6IG51bGwsXG4gIHN1Y2Nlc3M6IGZhbHNlLFxuICBlcnJvcjoge1xuICAgIGNvZGUsXG4gICAgbWVzc2FnZSxcbiAgICBkZXRhaWxzLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHJlcXVlc3RJZDogZ2VuZXJhdGVSZXF1ZXN0SWQoKSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVSZXF1ZXN0SWQgPSAoKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGByZXFfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKX1gO1xufTtcblxuZXhwb3J0IGNvbnN0IHNsZWVwID0gKG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufTtcblxuZXhwb3J0IGNvbnN0IHJldHJ5V2l0aEJhY2tvZmYgPSBhc3luYyA8VD4oXG4gIGZuOiAoKSA9PiBQcm9taXNlPFQ+LFxuICBtYXhSZXRyaWVzOiBudW1iZXIgPSBBUFBfQ09ORklHLkFQSS5NQVhfUkVUUklFUyxcbiAgYmFzZURlbGF5OiBudW1iZXIgPSBBUFBfQ09ORklHLkFQSS5SRVRSWV9ERUxBWV9NU1xuKTogUHJvbWlzZTxUPiA9PiB7XG4gIGxldCBsYXN0RXJyb3I6IEVycm9yIHwgbnVsbCA9IG51bGw7XG4gIFxuICBmb3IgKGxldCBhdHRlbXB0ID0gMDsgYXR0ZW1wdCA8PSBtYXhSZXRyaWVzOyBhdHRlbXB0KyspIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGZuKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxhc3RFcnJvciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcignVW5rbm93biBlcnJvcicpO1xuICAgICAgXG4gICAgICBpZiAoYXR0ZW1wdCA9PT0gbWF4UmV0cmllcykge1xuICAgICAgICB0aHJvdyBsYXN0RXJyb3I7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEV4cG9uZW50aWFsIGJhY2tvZmYgd2l0aCBqaXR0ZXJcbiAgICAgIGNvbnN0IGRlbGF5ID0gYmFzZURlbGF5ICogTWF0aC5wb3coMiwgYXR0ZW1wdCkgKyBNYXRoLnJhbmRvbSgpICogMTAwMDtcbiAgICAgIGF3YWl0IHNsZWVwKGRlbGF5KTtcbiAgICB9XG4gIH1cbiAgXG4gIHRocm93IGxhc3RFcnJvcjtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0FwaUVycm9yID0gKGVycm9yOiBhbnkpOiBlcnJvciBpcyBBcGlFcnJvciA9PiB7XG4gIHJldHVybiBlcnJvciAmJiB0eXBlb2YgZXJyb3IuZXJyb3IgPT09ICdvYmplY3QnICYmICdjb2RlJyBpbiBlcnJvci5lcnJvcjtcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRBcGlFcnJvciA9IChlcnJvcjogdW5rbm93bik6IHN0cmluZyA9PiB7XG4gIGlmIChpc0FwaUVycm9yKGVycm9yKSkge1xuICAgIHJldHVybiBlcnJvci5lcnJvci5tZXNzYWdlO1xuICB9XG4gIFxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICB9XG4gIFxuICByZXR1cm4gJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQnO1xufTtcbiJdLCJuYW1lcyI6WyJBUFBfQ09ORklHIiwiY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlIiwiZGF0YSIsInN1Y2Nlc3MiLCJjcmVhdGVFcnJvclJlc3BvbnNlIiwiY29kZSIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwiZXJyb3IiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZXF1ZXN0SWQiLCJnZW5lcmF0ZVJlcXVlc3RJZCIsIm5vdyIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInNsZWVwIiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJyZXRyeVdpdGhCYWNrb2ZmIiwiZm4iLCJtYXhSZXRyaWVzIiwiQVBJIiwiTUFYX1JFVFJJRVMiLCJiYXNlRGVsYXkiLCJSRVRSWV9ERUxBWV9NUyIsImxhc3RFcnJvciIsImF0dGVtcHQiLCJFcnJvciIsImRlbGF5IiwicG93IiwiaXNBcGlFcnJvciIsImZvcm1hdEFwaUVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/utils/api.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/shared/src/utils/validation.ts":
/*!*****************************************************!*\
  !*** ../../packages/shared/src/utils/validation.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidAudioType: () => (/* binding */ isValidAudioType),\n/* harmony export */   isValidImageType: () => (/* binding */ isValidImageType),\n/* harmony export */   isValidUrl: () => (/* binding */ isValidUrl),\n/* harmony export */   validatePresentationTitle: () => (/* binding */ validatePresentationTitle),\n/* harmony export */   validateSlideContent: () => (/* binding */ validateSlideContent)\n/* harmony export */ });\n/* harmony import */ var _constants_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/app */ \"(rsc)/../../packages/shared/src/constants/app.ts\");\n\nconst validatePresentationTitle = (title)=>{\n    if (!title || typeof title !== 'string') {\n        return {\n            isValid: false,\n            error: 'Title is required and must be a string'\n        };\n    }\n    if (title.trim().length === 0) {\n        return {\n            isValid: false,\n            error: 'Title cannot be empty'\n        };\n    }\n    if (title.length > _constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.PRESENTATION.MAX_TITLE_LENGTH) {\n        return {\n            isValid: false,\n            error: `Title cannot exceed ${_constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.PRESENTATION.MAX_TITLE_LENGTH} characters`\n        };\n    }\n    return {\n        isValid: true\n    };\n};\nconst validateSlideContent = (content)=>{\n    if (!content || typeof content !== 'string') {\n        return {\n            isValid: false,\n            error: 'Content is required and must be a string'\n        };\n    }\n    if (content.trim().length === 0) {\n        return {\n            isValid: false,\n            error: 'Content cannot be empty'\n        };\n    }\n    if (content.length > _constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.PRESENTATION.MAX_CONTENT_LENGTH) {\n        return {\n            isValid: false,\n            error: `Content cannot exceed ${_constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.PRESENTATION.MAX_CONTENT_LENGTH} characters`\n        };\n    }\n    return {\n        isValid: true\n    };\n};\nconst isValidUrl = (url)=>{\n    try {\n        new URL(url);\n        return true;\n    } catch  {\n        return false;\n    }\n};\nconst isValidImageType = (mimeType)=>{\n    return _constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.STORAGE.ALLOWED_IMAGE_TYPES.includes(mimeType);\n};\nconst isValidAudioType = (mimeType)=>{\n    return _constants_app__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.STORAGE.ALLOWED_AUDIO_TYPES.includes(mimeType);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvc2hhcmVkL3NyYy91dGlscy92YWxpZGF0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE4QztBQUV2QyxNQUFNQyw0QkFBNEIsQ0FBQ0M7SUFDeEMsSUFBSSxDQUFDQSxTQUFTLE9BQU9BLFVBQVUsVUFBVTtRQUN2QyxPQUFPO1lBQUVDLFNBQVM7WUFBT0MsT0FBTztRQUF5QztJQUMzRTtJQUVBLElBQUlGLE1BQU1HLElBQUksR0FBR0MsTUFBTSxLQUFLLEdBQUc7UUFDN0IsT0FBTztZQUFFSCxTQUFTO1lBQU9DLE9BQU87UUFBd0I7SUFDMUQ7SUFFQSxJQUFJRixNQUFNSSxNQUFNLEdBQUdOLHNEQUFVQSxDQUFDTyxZQUFZLENBQUNDLGdCQUFnQixFQUFFO1FBQzNELE9BQU87WUFDTEwsU0FBUztZQUNUQyxPQUFPLENBQUMsb0JBQW9CLEVBQUVKLHNEQUFVQSxDQUFDTyxZQUFZLENBQUNDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztRQUNyRjtJQUNGO0lBRUEsT0FBTztRQUFFTCxTQUFTO0lBQUs7QUFDekIsRUFBRTtBQUVLLE1BQU1NLHVCQUF1QixDQUFDQztJQUNuQyxJQUFJLENBQUNBLFdBQVcsT0FBT0EsWUFBWSxVQUFVO1FBQzNDLE9BQU87WUFBRVAsU0FBUztZQUFPQyxPQUFPO1FBQTJDO0lBQzdFO0lBRUEsSUFBSU0sUUFBUUwsSUFBSSxHQUFHQyxNQUFNLEtBQUssR0FBRztRQUMvQixPQUFPO1lBQUVILFNBQVM7WUFBT0MsT0FBTztRQUEwQjtJQUM1RDtJQUVBLElBQUlNLFFBQVFKLE1BQU0sR0FBR04sc0RBQVVBLENBQUNPLFlBQVksQ0FBQ0ksa0JBQWtCLEVBQUU7UUFDL0QsT0FBTztZQUNMUixTQUFTO1lBQ1RDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRUosc0RBQVVBLENBQUNPLFlBQVksQ0FBQ0ksa0JBQWtCLENBQUMsV0FBVyxDQUFDO1FBQ3pGO0lBQ0Y7SUFFQSxPQUFPO1FBQUVSLFNBQVM7SUFBSztBQUN6QixFQUFFO0FBRUssTUFBTVMsYUFBYSxDQUFDQztJQUN6QixJQUFJO1FBQ0YsSUFBSUMsSUFBSUQ7UUFDUixPQUFPO0lBQ1QsRUFBRSxPQUFNO1FBQ04sT0FBTztJQUNUO0FBQ0YsRUFBRTtBQUVLLE1BQU1FLG1CQUFtQixDQUFDQztJQUMvQixPQUFPaEIsc0RBQVVBLENBQUNpQixPQUFPLENBQUNDLG1CQUFtQixDQUFDQyxRQUFRLENBQUNIO0FBQ3pELEVBQUU7QUFFSyxNQUFNSSxtQkFBbUIsQ0FBQ0o7SUFDL0IsT0FBT2hCLHNEQUFVQSxDQUFDaUIsT0FBTyxDQUFDSSxtQkFBbUIsQ0FBQ0YsUUFBUSxDQUFDSDtBQUN6RCxFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGF6ZXRhXFxEb2N1bWVudHNcXFByb2plY3RzXFxzcGVha2RlY2stYnVpbGRcXHBhY2thZ2VzXFxzaGFyZWRcXHNyY1xcdXRpbHNcXHZhbGlkYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBQX0NPTkZJRyB9IGZyb20gJy4uL2NvbnN0YW50cy9hcHAnO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVQcmVzZW50YXRpb25UaXRsZSA9ICh0aXRsZTogc3RyaW5nKTogeyBpc1ZhbGlkOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9ID0+IHtcbiAgaWYgKCF0aXRsZSB8fCB0eXBlb2YgdGl0bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9yOiAnVGl0bGUgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBzdHJpbmcnIH07XG4gIH1cbiAgXG4gIGlmICh0aXRsZS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9yOiAnVGl0bGUgY2Fubm90IGJlIGVtcHR5JyB9O1xuICB9XG4gIFxuICBpZiAodGl0bGUubGVuZ3RoID4gQVBQX0NPTkZJRy5QUkVTRU5UQVRJT04uTUFYX1RJVExFX0xFTkdUSCkge1xuICAgIHJldHVybiB7IFxuICAgICAgaXNWYWxpZDogZmFsc2UsIFxuICAgICAgZXJyb3I6IGBUaXRsZSBjYW5ub3QgZXhjZWVkICR7QVBQX0NPTkZJRy5QUkVTRU5UQVRJT04uTUFYX1RJVExFX0xFTkdUSH0gY2hhcmFjdGVyc2AgXG4gICAgfTtcbiAgfVxuICBcbiAgcmV0dXJuIHsgaXNWYWxpZDogdHJ1ZSB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlU2xpZGVDb250ZW50ID0gKGNvbnRlbnQ6IHN0cmluZyk6IHsgaXNWYWxpZDogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfSA9PiB7XG4gIGlmICghY29udGVudCB8fCB0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3I6ICdDb250ZW50IGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgc3RyaW5nJyB9O1xuICB9XG4gIFxuICBpZiAoY29udGVudC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9yOiAnQ29udGVudCBjYW5ub3QgYmUgZW1wdHknIH07XG4gIH1cbiAgXG4gIGlmIChjb250ZW50Lmxlbmd0aCA+IEFQUF9DT05GSUcuUFJFU0VOVEFUSU9OLk1BWF9DT05URU5UX0xFTkdUSCkge1xuICAgIHJldHVybiB7IFxuICAgICAgaXNWYWxpZDogZmFsc2UsIFxuICAgICAgZXJyb3I6IGBDb250ZW50IGNhbm5vdCBleGNlZWQgJHtBUFBfQ09ORklHLlBSRVNFTlRBVElPTi5NQVhfQ09OVEVOVF9MRU5HVEh9IGNoYXJhY3RlcnNgIFxuICAgIH07XG4gIH1cbiAgXG4gIHJldHVybiB7IGlzVmFsaWQ6IHRydWUgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1ZhbGlkVXJsID0gKHVybDogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIHRyeSB7XG4gICAgbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpc1ZhbGlkSW1hZ2VUeXBlID0gKG1pbWVUeXBlOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIEFQUF9DT05GSUcuU1RPUkFHRS5BTExPV0VEX0lNQUdFX1RZUEVTLmluY2x1ZGVzKG1pbWVUeXBlIGFzIGFueSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNWYWxpZEF1ZGlvVHlwZSA9IChtaW1lVHlwZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBBUFBfQ09ORklHLlNUT1JBR0UuQUxMT1dFRF9BVURJT19UWVBFUy5pbmNsdWRlcyhtaW1lVHlwZSBhcyBhbnkpO1xufTtcbiJdLCJuYW1lcyI6WyJBUFBfQ09ORklHIiwidmFsaWRhdGVQcmVzZW50YXRpb25UaXRsZSIsInRpdGxlIiwiaXNWYWxpZCIsImVycm9yIiwidHJpbSIsImxlbmd0aCIsIlBSRVNFTlRBVElPTiIsIk1BWF9USVRMRV9MRU5HVEgiLCJ2YWxpZGF0ZVNsaWRlQ29udGVudCIsImNvbnRlbnQiLCJNQVhfQ09OVEVOVF9MRU5HVEgiLCJpc1ZhbGlkVXJsIiwidXJsIiwiVVJMIiwiaXNWYWxpZEltYWdlVHlwZSIsIm1pbWVUeXBlIiwiU1RPUkFHRSIsIkFMTE9XRURfSU1BR0VfVFlQRVMiLCJpbmNsdWRlcyIsImlzVmFsaWRBdWRpb1R5cGUiLCJBTExPV0VEX0FVRElPX1RZUEVTIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/shared/src/utils/validation.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/presentations/route.ts":
/*!****************************************!*\
  !*** ./app/api/presentations/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/next/dist/api/server.js\");\n/* harmony import */ var _speakdeck_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @speakdeck/shared */ \"(rsc)/../../packages/shared/src/index.ts\");\n/* harmony import */ var _src_services_database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../src/services/database */ \"(rsc)/./src/services/database.ts\");\n/* harmony import */ var _src_services_fallback_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../src/services/fallback-manager */ \"(rsc)/./src/services/fallback-manager.ts\");\n/* harmony import */ var _src_services_ai_services_gemini__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../src/services/ai-services/gemini */ \"(rsc)/./src/services/ai-services/gemini.ts\");\n/* harmony import */ var _src_services_ai_services_nano_banana__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../src/services/ai-services/nano-banana */ \"(rsc)/./src/services/ai-services/nano-banana.ts\");\n/* harmony import */ var _src_services_ai_services_eleven_labs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../src/services/ai-services/eleven-labs */ \"(rsc)/./src/services/ai-services/eleven-labs.ts\");\n/* harmony import */ var _src_lib_supabase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../src/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n\n\n\n\n\n\n\n\nasync function POST(request) {\n    const startTime = Date.now();\n    try {\n        console.log('POST /api/presentations called');\n        // Validate request body\n        const body = await request.json();\n        console.log('Request body:', body);\n        const { title, userId } = body;\n        const validation = (0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_1__.validatePresentationTitle)(title);\n        if (!validation.isValid) {\n            console.log('Validation failed:', validation.error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_1__.createErrorResponse)('INVALID_INPUT', validation.error), {\n                status: 400\n            });\n        }\n        console.log('Creating database service...');\n        const db = new _src_services_database__WEBPACK_IMPORTED_MODULE_2__.DatabaseService();\n        console.log('Creating fallback manager...');\n        const fallbackManager = new _src_services_fallback_manager__WEBPACK_IMPORTED_MODULE_3__.FallbackManager();\n        // Check if we should use fallback\n        console.log('Checking fallback availability...');\n        const fallbackCheck = await fallbackManager.shouldUseFallback(title);\n        console.log('Fallback check result:', fallbackCheck);\n        if (fallbackCheck.useFallback) {\n            console.log(`Using fallback for \"${title}\": ${fallbackCheck.reason}`);\n            const fallbackPresentation = await fallbackManager.getFallbackPresentation(title);\n            console.log('Got fallback presentation:', fallbackPresentation?.id || 'null');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_1__.createSuccessResponse)({\n                ...fallbackPresentation,\n                isFallback: true,\n                fallbackReason: fallbackCheck.reason\n            }), {\n                status: 201\n            });\n        }\n        // Create presentation record\n        console.log('Creating presentation in database...');\n        const presentationId = await db.createPresentation(title, userId);\n        console.log('Created presentation with ID:', presentationId);\n        // Start the AI generation pipeline in the background\n        console.log('Starting async generation pipeline...');\n        generatePresentationAsync(presentationId, title, db).catch((error)=>{\n            console.error(`Failed to generate presentation ${presentationId}:`, error);\n            db.updatePresentationStatus(presentationId, 'failed', error.message).catch((dbError)=>console.error('Failed to update status:', dbError));\n        });\n        // Return initial response immediately\n        console.log('Fetching initial presentation data...');\n        const initialPresentation = await db.getPresentation(presentationId);\n        console.log('Got initial presentation:', initialPresentation);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_1__.createSuccessResponse)(initialPresentation), {\n            status: 201\n        });\n    } catch (error) {\n        console.error('Presentation creation error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_1__.createErrorResponse)('INTERNAL_ERROR', 'Failed to create presentation', {\n            error: error instanceof Error ? error.message : 'Unknown error'\n        }), {\n            status: 500\n        });\n    }\n}\n// Background AI generation pipeline\nasync function generatePresentationAsync(presentationId, title, db) {\n    const startTime = Date.now();\n    let geminiService = null;\n    let nanoBananaService = null;\n    let elevenLabsService = null;\n    try {\n        // Initialize services\n        try {\n            geminiService = new _src_services_ai_services_gemini__WEBPACK_IMPORTED_MODULE_4__.GeminiService();\n            nanoBananaService = new _src_services_ai_services_nano_banana__WEBPACK_IMPORTED_MODULE_5__.NanoBananaService();\n            elevenLabsService = new _src_services_ai_services_eleven_labs__WEBPACK_IMPORTED_MODULE_6__.ElevenLabsService();\n        } catch (error) {\n            throw new Error(`Failed to initialize AI services: ${error}`);\n        }\n        // Update status to processing\n        await db.updatePresentationStatus(presentationId, 'processing');\n        await broadcastProgress(presentationId, 'processing', 10, 'Initializing AI services...');\n        // Step 1: Generate text content with Gemini\n        await db.updatePresentationStatus(presentationId, 'generating_text');\n        await broadcastProgress(presentationId, 'generating_text', 20, 'Generating slide content...');\n        const geminiResponse = await geminiService.generatePresentationContent(title, 4);\n        // Create slide records\n        const slideIds = [];\n        for(let i = 0; i < geminiResponse.slides.length; i++){\n            const slide = geminiResponse.slides[i];\n            const slideId = await db.createSlide({\n                presentationId,\n                slideNumber: i + 1,\n                title: slide.title,\n                content: slide.content,\n                imagePrompt: slide.imagePrompt\n            });\n            slideIds.push(slideId);\n        }\n        await broadcastProgress(presentationId, 'generating_text', 40, `Created ${slideIds.length} slides`);\n        // Step 2: Generate images with Nano Banana\n        await db.updatePresentationStatus(presentationId, 'generating_visuals');\n        await broadcastProgress(presentationId, 'generating_visuals', 50, 'Generating slide visuals...');\n        const imagePromises = geminiResponse.slides.map(async (slide, index)=>{\n            const slideId = slideIds[index];\n            try {\n                await db.updateSlideStatus(slideId, 'image', 'processing');\n                const imageResponse = await nanoBananaService.generateImage(slide.imagePrompt, index + 1);\n                await db.updateSlideMedia(slideId, imageResponse.imageUrl);\n                await db.updateSlideStatus(slideId, 'image', 'completed');\n                return {\n                    slideId,\n                    imageUrl: imageResponse.imageUrl,\n                    callsUsed: imageResponse.callsUsed\n                };\n            } catch (error) {\n                console.error(`Failed to generate image for slide ${index + 1}:`, error);\n                await db.updateSlideStatus(slideId, 'image', 'failed');\n                return {\n                    slideId,\n                    imageUrl: null,\n                    callsUsed: 0\n                };\n            }\n        });\n        const imageResults = await Promise.allSettled(imagePromises);\n        const successfulImages = imageResults.filter((result)=>result.status === 'fulfilled').map((result)=>result.value);\n        await broadcastProgress(presentationId, 'generating_visuals', 70, `Generated ${successfulImages.filter((r)=>r.imageUrl).length} visuals`);\n        // Step 3: Generate audio narration with ElevenLabs\n        await db.updatePresentationStatus(presentationId, 'generating_audio');\n        await broadcastProgress(presentationId, 'generating_audio', 80, 'Generating narration...');\n        const audioPromises = geminiResponse.slides.map(async (slide, index)=>{\n            const slideId = slideIds[index];\n            const fullText = `${slide.title}. ${slide.content}`;\n            try {\n                await db.updateSlideStatus(slideId, 'audio', 'processing');\n                const audioResponse = await elevenLabsService.generateNarration(fullText, index + 1);\n                await db.updateSlideMedia(slideId, undefined, audioResponse.audioUrl);\n                await db.updateSlideStatus(slideId, 'audio', 'completed');\n                return {\n                    slideId,\n                    audioUrl: audioResponse.audioUrl,\n                    charactersUsed: audioResponse.charactersUsed\n                };\n            } catch (error) {\n                console.error(`Failed to generate audio for slide ${index + 1}:`, error);\n                await db.updateSlideStatus(slideId, 'audio', 'failed');\n                return {\n                    slideId,\n                    audioUrl: null,\n                    charactersUsed: 0\n                };\n            }\n        });\n        const audioResults = await Promise.allSettled(audioPromises);\n        const successfulAudio = audioResults.filter((result)=>result.status === 'fulfilled').map((result)=>result.value);\n        await broadcastProgress(presentationId, 'generating_audio', 95, `Generated ${successfulAudio.filter((r)=>r.audioUrl).length} narrations`);\n        // Final step: Update metadata and mark as completed\n        const generationTime = Date.now() - startTime;\n        const totalCalls = successfulImages.reduce((sum, img)=>sum + img.callsUsed, 0);\n        const totalCharacters = successfulAudio.reduce((sum, audio)=>sum + audio.charactersUsed, 0);\n        await db.updatePresentationMetadata(presentationId, {\n            geminiTokensUsed: geminiResponse.tokensUsed,\n            nanoBananaCallsUsed: totalCalls,\n            elevenLabsCharactersUsed: totalCharacters\n        }, generationTime);\n        await db.updatePresentationStatus(presentationId, 'completed');\n        await broadcastProgress(presentationId, 'completed', 100, 'Presentation completed!');\n        console.log(`Successfully generated presentation ${presentationId} in ${generationTime}ms`);\n    } catch (error) {\n        console.error(`AI generation pipeline failed for ${presentationId}:`, error);\n        const generationTime = Date.now() - startTime;\n        await db.updatePresentationStatus(presentationId, 'failed', error instanceof Error ? error.message : 'Unknown error occurred');\n        await broadcastProgress(presentationId, 'failed', 100, 'Generation failed');\n    }\n}\n// Real-time progress updates\nasync function broadcastProgress(presentationId, status, progress, currentStep) {\n    try {\n        const channel = _src_lib_supabase__WEBPACK_IMPORTED_MODULE_7__.supabase.channel(`presentation-${presentationId}`);\n        await channel.send({\n            type: 'broadcast',\n            event: 'progress_update',\n            payload: {\n                presentationId,\n                status,\n                progress,\n                currentStep,\n                timestamp: new Date().toISOString()\n            }\n        });\n    } catch (error) {\n        console.error('Failed to broadcast progress:', error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/presentations/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   validateSupabaseConfig: () => (/* binding */ validateSupabaseConfig)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/../../node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://xevgjssynqyqegdccwvy.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhldmdqc3N5bnF5cWVnZGNjd3Z5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxMjc2OTgsImV4cCI6MjA3MjcwMzY5OH0.koL-GGUsFuD0CQrz_UAlsz24mmBs4zPzcduznUyIbtM\" || 0;\n// Function to check if we have valid env vars\nconst hasValidSupabaseConfig = ()=>{\n    return  true && !\"https://xevgjssynqyqegdccwvy.supabase.co\".includes('placeholder');\n};\n// Create Supabase client with fallback for build time\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: \"undefined\" !== 'undefined',\n        autoRefreshToken: \"undefined\" !== 'undefined'\n    },\n    realtime: {\n        params: {\n            eventsPerSecond: 10\n        }\n    }\n});\n// Admin client for server-side operations\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabaseAdmin = supabaseServiceKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n}) : null;\n// Helper to validate config at runtime\nconst validateSupabaseConfig = ()=>{\n    if (!hasValidSupabaseConfig() && \"undefined\" !== 'undefined') {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFFckQsTUFBTUMsY0FBY0MsMENBQW9DLElBQUksQ0FBaUM7QUFDN0YsTUFBTUcsa0JBQWtCSCxrTkFBeUMsSUFBSSxDQUFpQjtBQUV0Riw4Q0FBOEM7QUFDOUMsTUFBTUsseUJBQXlCO0lBQzdCLE9BQU9MLEtBQ3lDLElBQ3pDLENBQUNBLDBDQUFvQyxDQUFDTSxRQUFRLENBQUM7QUFDeEQ7QUFFQSxzREFBc0Q7QUFDL0MsTUFBTUMsV0FBV1QsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFpQjtJQUNqRUssTUFBTTtRQUNKQyxnQkFBZ0IsZ0JBQWtCO1FBQ2xDQyxrQkFBa0IsZ0JBQWtCO0lBQ3RDO0lBQ0FDLFVBQVU7UUFDUkMsUUFBUTtZQUNOQyxpQkFBaUI7UUFDbkI7SUFDRjtBQUNGLEdBQUc7QUFFSCwwQ0FBMEM7QUFDMUMsTUFBTUMscUJBQXFCZCxRQUFRQyxHQUFHLENBQUNjLHlCQUF5QjtBQUV6RCxNQUFNQyxnQkFBZ0JGLHFCQUN6QmhCLG1FQUFZQSxDQUFDQyxhQUFhZSxvQkFBb0I7SUFDNUNOLE1BQU07UUFDSkUsa0JBQWtCO1FBQ2xCRCxnQkFBZ0I7SUFDbEI7QUFDRixLQUNBLEtBQUs7QUFFVCx1Q0FBdUM7QUFDaEMsTUFBTVEseUJBQXlCO0lBQ3BDLElBQUksQ0FBQ1osNEJBQTRCLGdCQUFrQixhQUFhLEVBRS9EO0FBQ0gsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxhemV0YVxcRG9jdW1lbnRzXFxQcm9qZWN0c1xcc3BlYWtkZWNrLWJ1aWxkXFxhcHBzXFx3ZWJcXHNyY1xcbGliXFxzdXBhYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCAnaHR0cHM6Ly9wbGFjZWhvbGRlci5zdXBhYmFzZS5jbyc7XG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCAncGxhY2Vob2xkZXIta2V5JztcblxuLy8gRnVuY3Rpb24gdG8gY2hlY2sgaWYgd2UgaGF2ZSB2YWxpZCBlbnYgdmFyc1xuY29uc3QgaGFzVmFsaWRTdXBhYmFzZUNvbmZpZyA9ICgpID0+IHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCAmJiBcbiAgICAgICAgIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZICYmXG4gICAgICAgICAhcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMLmluY2x1ZGVzKCdwbGFjZWhvbGRlcicpO1xufTtcblxuLy8gQ3JlYXRlIFN1cGFiYXNlIGNsaWVudCB3aXRoIGZhbGxiYWNrIGZvciBidWlsZCB0aW1lXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSwge1xuICBhdXRoOiB7XG4gICAgcGVyc2lzdFNlc3Npb246IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnLFxuICAgIGF1dG9SZWZyZXNoVG9rZW46IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnLFxuICB9LFxuICByZWFsdGltZToge1xuICAgIHBhcmFtczoge1xuICAgICAgZXZlbnRzUGVyU2Vjb25kOiAxMCxcbiAgICB9LFxuICB9LFxufSk7XG5cbi8vIEFkbWluIGNsaWVudCBmb3Igc2VydmVyLXNpZGUgb3BlcmF0aW9uc1xuY29uc3Qgc3VwYWJhc2VTZXJ2aWNlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWTtcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBzdXBhYmFzZVNlcnZpY2VLZXlcbiAgPyBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlU2VydmljZUtleSwge1xuICAgICAgYXV0aDoge1xuICAgICAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSxcbiAgICAgICAgcGVyc2lzdFNlc3Npb246IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KVxuICA6IG51bGw7XG5cbi8vIEhlbHBlciB0byB2YWxpZGF0ZSBjb25maWcgYXQgcnVudGltZVxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlU3VwYWJhc2VDb25maWcgPSAoKSA9PiB7XG4gIGlmICghaGFzVmFsaWRTdXBhYmFzZUNvbmZpZygpICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBub3QgcHJvcGVybHkgY29uZmlndXJlZCcpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiaGFzVmFsaWRTdXBhYmFzZUNvbmZpZyIsImluY2x1ZGVzIiwic3VwYWJhc2UiLCJhdXRoIiwicGVyc2lzdFNlc3Npb24iLCJhdXRvUmVmcmVzaFRva2VuIiwicmVhbHRpbWUiLCJwYXJhbXMiLCJldmVudHNQZXJTZWNvbmQiLCJzdXBhYmFzZVNlcnZpY2VLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwic3VwYWJhc2VBZG1pbiIsInZhbGlkYXRlU3VwYWJhc2VDb25maWciLCJjb25zb2xlIiwiZXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai-services/eleven-labs.ts":
/*!*************************************************!*\
  !*** ./src/services/ai-services/eleven-labs.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElevenLabsService: () => (/* binding */ ElevenLabsService)\n/* harmony export */ });\n/* harmony import */ var _speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @speakdeck/shared */ \"(rsc)/../../packages/shared/src/index.ts\");\n\nclass ElevenLabsService {\n    constructor(apiKey){\n        this.baseUrl = 'https://api.elevenlabs.io/v1';\n        this.defaultVoiceId = 'pNInz6obpgDQGcFmaJgB'; // Default voice ID (Adam)\n        this.apiKey = apiKey || process.env.ELEVENLABS_API_KEY || '';\n        if (!this.apiKey) {\n            throw new Error('ElevenLabs API key is required');\n        }\n    }\n    async generateNarration(text, slideNumber, voiceId) {\n        const cleanText = this.prepareTextForSpeech(text, slideNumber);\n        const selectedVoiceId = voiceId || this.defaultVoiceId;\n        return (0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__.retryWithBackoff)(async ()=>{\n            const response = await fetch(`${this.baseUrl}/text-to-speech/${selectedVoiceId}`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'audio/mpeg',\n                    'Content-Type': 'application/json',\n                    'xi-api-key': this.apiKey\n                },\n                body: JSON.stringify({\n                    text: cleanText,\n                    model_id: 'eleven_monolingual_v1',\n                    voice_settings: {\n                        stability: 0.5,\n                        similarity_boost: 0.75,\n                        style: 0.0,\n                        use_speaker_boost: true\n                    }\n                })\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                console.warn(`ElevenLabs API error: ${response.status} - ${error}`);\n                // For suspended accounts or rate limits, return silent audio instead of failing\n                if (response.status === 401 || response.status === 429) {\n                    console.log('ElevenLabs account suspended or rate limited, returning silent audio');\n                    return {\n                        audioUrl: this.generateSilentAudio(),\n                        charactersUsed: 0\n                    };\n                }\n                throw new Error(`ElevenLabs API error: ${response.status} - ${error}`);\n            }\n            // Get the audio blob\n            const audioBlob = await response.blob();\n            // For MVP, we'll create a data URL\n            // In production, you'd upload this to Supabase Storage\n            const audioUrl = await this.blobToDataUrl(audioBlob);\n            return {\n                audioUrl,\n                charactersUsed: cleanText.length\n            };\n        });\n    }\n    prepareTextForSpeech(text, slideNumber) {\n        // Clean and prepare text for better speech synthesis\n        let cleanText = text.trim();\n        // Add slide context for better flow\n        if (slideNumber === 1) {\n            cleanText = `Welcome to our presentation. ${cleanText}`;\n        }\n        // Replace problematic characters and formatting\n        cleanText = cleanText.replace(/[\"\"]/g, '\"') // Normalize quotes\n        .replace(/['']/g, \"'\") // Normalize apostrophes\n        .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold markdown\n        .replace(/\\*(.*?)\\*/g, '$1') // Remove italic markdown\n        .replace(/#{1,6}\\s/g, '') // Remove headers\n        .replace(/\\n+/g, '. ') // Replace line breaks with periods\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .replace(/\\.\\./g, '.') // Fix double periods\n        .replace(/([.!?])\\s*([.!?])/g, '$1 ') // Fix multiple punctuation\n        .trim();\n        // Ensure text ends with proper punctuation\n        if (!/[.!?]$/.test(cleanText)) {\n            cleanText += '.';\n        }\n        // Add natural pauses\n        cleanText = cleanText.replace(/[.!?]/g, '$& ');\n        return cleanText;\n    }\n    async blobToDataUrl(blob) {\n        try {\n            // Convert blob to buffer in Node.js environment\n            const arrayBuffer = await blob.arrayBuffer();\n            const buffer = Buffer.from(arrayBuffer);\n            const base64 = buffer.toString('base64');\n            return `data:audio/mpeg;base64,${base64}`;\n        } catch (error) {\n            console.error('Failed to convert blob to data URL:', error);\n            // Return a placeholder or empty audio URL\n            return this.generateSilentAudio();\n        }\n    }\n    async generateMultipleNarrations(texts, voiceId) {\n        const results = await Promise.allSettled(texts.map((text, index)=>this.generateNarration(text, index + 1, voiceId)));\n        return results.map((result, index)=>{\n            if (result.status === 'fulfilled') {\n                return result.value;\n            } else {\n                console.error(`Failed to generate narration for slide ${index + 1}:`, result.reason);\n                return {\n                    audioUrl: this.generateSilentAudio(),\n                    charactersUsed: 0\n                };\n            }\n        });\n    }\n    generateSilentAudio() {\n        // Generate a longer silent audio data URL as fallback\n        // This is a minimal WAV file with silence - longer duration prevents auto-advance\n        const sampleRate = 22050;\n        const duration = 30; // 30 seconds to give users time to read\n        const numSamples = sampleRate * duration;\n        const arrayBuffer = new ArrayBuffer(44 + numSamples * 2);\n        const view = new DataView(arrayBuffer);\n        // WAV header\n        const writeString = (offset, string)=>{\n            for(let i = 0; i < string.length; i++){\n                view.setUint8(offset + i, string.charCodeAt(i));\n            }\n        };\n        writeString(0, 'RIFF');\n        view.setUint32(4, 36 + numSamples * 2, true);\n        writeString(8, 'WAVE');\n        writeString(12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n        view.setUint16(22, 1, true);\n        view.setUint32(24, sampleRate, true);\n        view.setUint32(28, sampleRate * 2, true);\n        view.setUint16(32, 2, true);\n        view.setUint16(34, 16, true);\n        writeString(36, 'data');\n        view.setUint32(40, numSamples * 2, true);\n        // Fill with silence (zeros)\n        for(let i = 0; i < numSamples; i++){\n            view.setInt16(44 + i * 2, 0, true);\n        }\n        // Convert to base64 data URL for Node.js environment\n        const buffer = Buffer.from(arrayBuffer);\n        const base64 = buffer.toString('base64');\n        return `data:audio/wav;base64,${base64}`;\n    }\n    async getAvailableVoices() {\n        try {\n            const response = await fetch(`${this.baseUrl}/voices`, {\n                headers: {\n                    'xi-api-key': this.apiKey\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch voices: ${response.status}`);\n            }\n            const data = await response.json();\n            return data.voices?.map((voice)=>({\n                    id: voice.voice_id,\n                    name: voice.name,\n                    category: voice.category || 'general'\n                })) || [];\n        } catch (error) {\n            console.error('Failed to fetch available voices:', error);\n            // Return default voices as fallback\n            return [\n                {\n                    id: this.defaultVoiceId,\n                    name: 'Adam',\n                    category: 'premade'\n                },\n                {\n                    id: '21m00Tcm4TlvDq8ikWAM',\n                    name: 'Rachel',\n                    category: 'premade'\n                },\n                {\n                    id: 'AZnzlk1XvdvUeBnXmlld',\n                    name: 'Domi',\n                    category: 'premade'\n                }\n            ];\n        }\n    }\n    async checkQuota() {\n        try {\n            const response = await fetch(`${this.baseUrl}/user`, {\n                headers: {\n                    'xi-api-key': this.apiKey\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch user info: ${response.status}`);\n            }\n            const data = await response.json();\n            return {\n                remaining: data.subscription?.character_limit - data.subscription?.character_count || 0,\n                total: data.subscription?.character_limit || 10000\n            };\n        } catch (error) {\n            console.error('Failed to check ElevenLabs quota:', error);\n            // Return default quota as fallback\n            const monthlyQuota = parseInt(process.env.ELEVENLABS_MONTHLY_QUOTA || '10000');\n            return {\n                remaining: monthlyQuota,\n                total: monthlyQuota\n            };\n        }\n    }\n    async uploadAudioToStorage(audioBlob, fileName) {\n        // This would upload the audio to Supabase Storage\n        // For now, we'll return a data URL\n        return this.blobToDataUrl(audioBlob);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai-services/eleven-labs.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai-services/gemini.ts":
/*!********************************************!*\
  !*** ./src/services/ai-services/gemini.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiService: () => (/* binding */ GeminiService)\n/* harmony export */ });\n/* harmony import */ var _speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @speakdeck/shared */ \"(rsc)/../../packages/shared/src/index.ts\");\n\nclass GeminiService {\n    constructor(apiKey){\n        this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\n        this.apiKey = apiKey || process.env.GEMINI_API_KEY || '';\n        if (!this.apiKey) {\n            throw new Error('Gemini API key is required');\n        }\n    }\n    async generatePresentationContent(topic, slideCount = 4) {\n        const prompt = this.createPresentationPrompt(topic, slideCount);\n        return (0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__.retryWithBackoff)(async ()=>{\n            const response = await fetch(`${this.baseUrl}/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    contents: [\n                        {\n                            parts: [\n                                {\n                                    text: prompt\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.7,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 2048\n                    },\n                    safetySettings: [\n                        {\n                            category: 'HARM_CATEGORY_HARASSMENT',\n                            threshold: 'BLOCK_MEDIUM_AND_ABOVE'\n                        }\n                    ]\n                })\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(`Gemini API error: ${response.status} - ${error}`);\n            }\n            const data = await response.json();\n            if (!data.candidates || !data.candidates[0]?.content?.parts[0]?.text) {\n                throw new Error('Invalid response from Gemini API');\n            }\n            const generatedText = data.candidates[0].content.parts[0].text;\n            return this.parseGeminiResponse(generatedText);\n        });\n    }\n    createPresentationPrompt(topic, slideCount) {\n        return `Create a ${slideCount}-slide presentation about \"${topic}\". \n    \nFormat your response as a JSON object with this exact structure:\n{\n  \"slides\": [\n    {\n      \"title\": \"Slide title here\",\n      \"content\": \"Detailed slide content here (2-3 sentences max)\",\n      \"imagePrompt\": \"Detailed visual description for image generation\"\n    }\n  ]\n}\n\nRequirements:\n- Make it engaging and informative\n- Keep content concise but meaningful\n- Create vivid, specific image prompts that would generate compelling visuals\n- Ensure logical flow between slides\n- First slide should be an introduction, last slide should be a conclusion\n- Make the content suitable for a ${slideCount < 4 ? 'brief' : 'comprehensive'} presentation\n\nTopic: ${topic}\nNumber of slides: ${slideCount}\n\nPlease respond with valid JSON only, no additional text.`;\n    }\n    parseGeminiResponse(text) {\n        try {\n            // Try to extract JSON from the response\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error('No JSON found in response');\n            }\n            const parsed = JSON.parse(jsonMatch[0]);\n            if (!parsed.slides || !Array.isArray(parsed.slides)) {\n                throw new Error('Invalid slides structure');\n            }\n            // Validate slide structure\n            const validatedSlides = parsed.slides.map((slide, index)=>{\n                if (!slide.title || !slide.content) {\n                    throw new Error(`Invalid slide at index ${index}`);\n                }\n                return {\n                    title: slide.title.trim(),\n                    content: slide.content.trim(),\n                    imagePrompt: slide.imagePrompt?.trim() || `Professional image related to: ${slide.title}`\n                };\n            });\n            return {\n                slides: validatedSlides,\n                tokensUsed: this.estimateTokens(text)\n            };\n        } catch (error) {\n            console.error('Failed to parse Gemini response:', error);\n            // Fallback: Create basic slides from the topic\n            return this.createFallbackResponse(text);\n        }\n    }\n    createFallbackResponse(originalText) {\n        // Extract any usable content or create basic structure\n        const lines = originalText.split('\\n').filter((line)=>line.trim());\n        const slideCount = Math.min(Math.max(lines.length, 3), 5);\n        const fallbackSlides = [];\n        for(let i = 0; i < slideCount; i++){\n            fallbackSlides.push({\n                title: i === 0 ? 'Introduction' : i === slideCount - 1 ? 'Conclusion' : `Key Point ${i}`,\n                content: lines[i] || 'Content generated from the presentation topic.',\n                imagePrompt: `Professional illustration representing slide ${i + 1} content`\n            });\n        }\n        return {\n            slides: fallbackSlides,\n            tokensUsed: this.estimateTokens(originalText)\n        };\n    }\n    estimateTokens(text) {\n        // Rough estimation: ~4 characters per token\n        return Math.ceil(text.length / 4);\n    }\n    async checkQuota() {\n        // For MVP, we'll implement simple quota tracking\n        // In production, this would check actual API quota\n        const dailyQuota = parseInt(process.env.GEMINI_DAILY_QUOTA || '100');\n        // This would need to be stored in database/cache in real implementation\n        return {\n            remaining: dailyQuota,\n            total: dailyQuota\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai-services/gemini.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai-services/nano-banana.ts":
/*!*************************************************!*\
  !*** ./src/services/ai-services/nano-banana.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NanoBananaService: () => (/* binding */ NanoBananaService)\n/* harmony export */ });\n/* harmony import */ var _speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @speakdeck/shared */ \"(rsc)/../../packages/shared/src/index.ts\");\n/* harmony import */ var _google_genai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google/genai */ \"(rsc)/../../node_modules/@google/genai/dist/node/index.mjs\");\n\n\nclass NanoBananaService {\n    constructor(apiKey){\n        this.modelName = 'gemini-2.5-flash-image-preview';\n        this.apiKey = apiKey || process.env.GEMINI_API_KEY || '';\n        if (!this.apiKey) {\n            throw new Error('Gemini API key is required - please set GEMINI_API_KEY environment variable');\n        }\n        this.ai = new _google_genai__WEBPACK_IMPORTED_MODULE_1__.GoogleGenAI({\n            apiKey: this.apiKey\n        });\n    }\n    async generateImage(prompt, slideNumber) {\n        const enhancedPrompt = this.enhancePrompt(prompt, slideNumber);\n        return (0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__.retryWithBackoff)(async ()=>{\n            try {\n                console.log(`Generating image with Gemini ${this.modelName} for slide ${slideNumber}:`, enhancedPrompt);\n                // Use the correct Google GenAI SDK approach\n                const response = await this.ai.models.generateContent({\n                    model: this.modelName,\n                    contents: [\n                        {\n                            parts: [\n                                {\n                                    text: enhancedPrompt\n                                }\n                            ]\n                        }\n                    ]\n                });\n                console.log('Gemini API response:', response);\n                // Check if we have candidates with image data\n                const candidates = response.candidates || [];\n                for (const candidate of candidates){\n                    const parts = candidate.content?.parts || [];\n                    for (const part of parts){\n                        // Check for text response first (in case of error messages)\n                        if (part.text) {\n                            console.log('Gemini response text:', part.text);\n                        }\n                        // Look for inline image data\n                        if (part.inlineData?.data) {\n                            const mimeType = part.inlineData.mimeType || 'image/png';\n                            const dataUrl = `data:${mimeType};base64,${part.inlineData.data}`;\n                            console.log(`Successfully generated image for slide ${slideNumber} (${mimeType})`);\n                            console.log('Image data length:', part.inlineData.data.length);\n                            return {\n                                imageUrl: dataUrl,\n                                callsUsed: 1\n                            };\n                        }\n                    }\n                }\n                // If we reach here, no image was generated\n                console.warn('No image data returned from Gemini API');\n                console.warn('Full response:', JSON.stringify(response, null, 2));\n                return {\n                    imageUrl: await this.generatePlaceholderImage(prompt, slideNumber),\n                    callsUsed: 0\n                };\n            } catch (error) {\n                console.error(`Failed to generate image for slide ${slideNumber}:`, error);\n                // Fallback to placeholder image\n                return {\n                    imageUrl: await this.generatePlaceholderImage(prompt, slideNumber),\n                    callsUsed: 0\n                };\n            }\n        });\n    }\n    async editImage(baseImageUrl, editPrompt, slideNumber) {\n        return (0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__.retryWithBackoff)(async ()=>{\n            try {\n                console.log(`Editing image with Gemini ${this.modelName} for slide ${slideNumber}:`, editPrompt);\n                // Convert data URL to base64 if needed\n                let base64Data;\n                let mimeType;\n                if (baseImageUrl.startsWith('data:')) {\n                    const [header, data] = baseImageUrl.split(',');\n                    mimeType = header.match(/data:([^;]+)/)?.[1] || 'image/png';\n                    base64Data = data;\n                } else {\n                    // If it's a URL, you'd need to fetch and convert to base64\n                    // For now, throw an error as this requires additional handling\n                    throw new Error('URL-based images need to be converted to base64 first');\n                }\n                const response = await this.ai.models.generateContent({\n                    model: this.modelName,\n                    contents: [\n                        {\n                            parts: [\n                                {\n                                    text: editPrompt\n                                },\n                                {\n                                    inlineData: {\n                                        mimeType: mimeType,\n                                        data: base64Data\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                });\n                console.log('Gemini image edit response:', response);\n                // Check if we have candidates with image data\n                const candidates = response.candidates || [];\n                for (const candidate of candidates){\n                    const parts = candidate.content?.parts || [];\n                    for (const part of parts){\n                        if (part.text) {\n                            console.log('Gemini edit response text:', part.text);\n                        }\n                        if (part.inlineData?.data) {\n                            const resultMimeType = part.inlineData.mimeType || 'image/png';\n                            const dataUrl = `data:${resultMimeType};base64,${part.inlineData.data}`;\n                            console.log(`Successfully edited image for slide ${slideNumber} (${resultMimeType})`);\n                            return {\n                                imageUrl: dataUrl,\n                                callsUsed: 1\n                            };\n                        }\n                    }\n                }\n                console.warn('No edited image data returned from Gemini API');\n                return {\n                    imageUrl: baseImageUrl,\n                    callsUsed: 0\n                };\n            } catch (error) {\n                console.error(`Failed to edit image for slide ${slideNumber}:`, error);\n                return {\n                    imageUrl: baseImageUrl,\n                    callsUsed: 0\n                };\n            }\n        });\n    }\n    enhancePrompt(originalPrompt, slideNumber) {\n        // Create a more detailed prompt for better image generation\n        const styleModifiers = [\n            'high-quality digital art',\n            'professional presentation style',\n            'clean modern design',\n            'well-composed',\n            '4K resolution',\n            'bright and clear',\n            'business-appropriate',\n            'vector illustration style',\n            'minimalist design'\n        ];\n        const contextModifier = slideNumber === 1 ? 'title slide, introductory visual, eye-catching header image' : `content slide ${slideNumber}, supporting visual element`;\n        // Build a comprehensive prompt\n        const fullPrompt = `Create a ${contextModifier}: ${originalPrompt}. \nStyle: ${styleModifiers.join(', ')}. \nRequirements: The image should be suitable for a professional presentation slide, \nwith clear visual hierarchy, appropriate typography space, and engaging visual elements.\nAvoid cluttered designs and ensure high contrast for readability.`;\n        return fullPrompt;\n    }\n    async generatePlaceholderImage(prompt, slideNumber) {\n        console.log(`Generating placeholder image for slide ${slideNumber}`);\n        const seed = this.hashString(prompt);\n        const colors = [\n            '4F46E5',\n            '059669',\n            'DC2626',\n            'D97706',\n            '7C3AED',\n            '0EA5E9',\n            'EF4444',\n            '10B981'\n        ];\n        const color = colors[seed % colors.length];\n        const width = 1200; // Higher resolution\n        const height = 800;\n        // Using a placeholder service that generates images with text\n        const placeholderText = encodeURIComponent(`Slide ${slideNumber}`);\n        return `https://via.placeholder.com/${width}x${height}/${color}/FFFFFF?text=${placeholderText}`;\n    }\n    hashString(str) {\n        let hash = 0;\n        for(let i = 0; i < str.length; i++){\n            const char = str.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return Math.abs(hash);\n    }\n    async uploadImageToStorage(imageUrl, fileName) {\n        // This would typically download the image and upload to Supabase Storage\n        // For now, we'll return the direct URL\n        return imageUrl;\n    }\n    async checkQuota() {\n        // For MVP, implement simple quota tracking\n        const dailyQuota = parseInt(process.env.NANO_BANANA_DAILY_QUOTA || '100');\n        return {\n            remaining: dailyQuota,\n            total: dailyQuota\n        };\n    }\n    // Helper function to convert image URL to base64\n    async convertUrlToBase64(imageUrl) {\n        try {\n            const response = await fetch(imageUrl);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch image: ${response.statusText}`);\n            }\n            const arrayBuffer = await response.arrayBuffer();\n            const base64 = Buffer.from(arrayBuffer).toString('base64');\n            const mimeType = response.headers.get('content-type') || 'image/png';\n            return {\n                data: base64,\n                mimeType\n            };\n        } catch (error) {\n            console.error('Failed to convert URL to base64:', error);\n            throw error;\n        }\n    }\n    // Enhanced image editing that can handle URLs\n    async editImageAdvanced(baseImageUrl, editPrompt, slideNumber) {\n        return (0,_speakdeck_shared__WEBPACK_IMPORTED_MODULE_0__.retryWithBackoff)(async ()=>{\n            try {\n                let base64Data;\n                let mimeType;\n                if (baseImageUrl.startsWith('data:')) {\n                    // Handle data URLs\n                    const [header, data] = baseImageUrl.split(',');\n                    mimeType = header.match(/data:([^;]+)/)?.[1] || 'image/png';\n                    base64Data = data;\n                } else {\n                    // Handle regular URLs by converting to base64\n                    const converted = await this.convertUrlToBase64(baseImageUrl);\n                    base64Data = converted.data;\n                    mimeType = converted.mimeType;\n                }\n                const response = await this.ai.models.generateContent({\n                    model: this.modelName,\n                    contents: [\n                        {\n                            parts: [\n                                {\n                                    text: editPrompt\n                                },\n                                {\n                                    inlineData: {\n                                        mimeType: mimeType,\n                                        data: base64Data\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                });\n                // Process response same as editImage method\n                const candidates = response.candidates || [];\n                for (const candidate of candidates){\n                    const parts = candidate.content?.parts || [];\n                    for (const part of parts){\n                        if (part.inlineData?.data) {\n                            const resultMimeType = part.inlineData.mimeType || 'image/png';\n                            const dataUrl = `data:${resultMimeType};base64,${part.inlineData.data}`;\n                            return {\n                                imageUrl: dataUrl,\n                                callsUsed: 1\n                            };\n                        }\n                    }\n                }\n                return {\n                    imageUrl: baseImageUrl,\n                    callsUsed: 0\n                };\n            } catch (error) {\n                console.error(`Failed to edit image for slide ${slideNumber}:`, error);\n                return {\n                    imageUrl: baseImageUrl,\n                    callsUsed: 0\n                };\n            }\n        });\n    }\n    // Batch generation for multiple slides\n    async generateMultipleImages(prompts) {\n        const results = await Promise.allSettled(prompts.map((prompt, index)=>this.generateImage(prompt, index + 1)));\n        return results.map((result, index)=>{\n            if (result.status === 'fulfilled') {\n                return result.value;\n            } else {\n                console.error(`Failed to generate image for slide ${index + 1}:`, result.reason);\n                return {\n                    imageUrl: `https://via.placeholder.com/1200x800/4F46E5/FFFFFF?text=Slide+${index + 1}`,\n                    callsUsed: 0\n                };\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai-services/nano-banana.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/database.ts":
/*!**********************************!*\
  !*** ./src/services/database.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n\nclass DatabaseService {\n    // Presentation operations\n    async createPresentation(title, userId) {\n        console.log('DatabaseService.createPresentation called with:', {\n            title,\n            userId\n        });\n        const presentationId = crypto.randomUUID();\n        console.log('Generated presentation ID:', presentationId);\n        const insertData = {\n            id: presentationId,\n            title: title.trim(),\n            user_id: userId || null,\n            total_slides: 0,\n            status: 'pending',\n            metadata: {}\n        };\n        console.log('Inserting presentation data:', insertData);\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured - missing SUPABASE_SERVICE_ROLE_KEY');\n        }\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('presentations').insert(insertData);\n        if (error) {\n            console.error('Database insert error:', error);\n            throw new Error(`Failed to create presentation: ${error.message}`);\n        }\n        console.log('Successfully created presentation:', presentationId);\n        return presentationId;\n    }\n    async updatePresentationStatus(id, status, errorMessage) {\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('presentations').update({\n            status,\n            error_message: errorMessage || null,\n            updated_at: new Date().toISOString()\n        }).eq('id', id);\n        if (error) {\n            throw new Error(`Failed to update presentation status: ${error.message}`);\n        }\n    }\n    async updatePresentationMetadata(id, metadata, generationTimeMs) {\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('presentations').update({\n            metadata,\n            generation_time_ms: generationTimeMs,\n            updated_at: new Date().toISOString()\n        }).eq('id', id);\n        if (error) {\n            throw new Error(`Failed to update presentation metadata: ${error.message}`);\n        }\n    }\n    async getPresentation(id) {\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        const { data: presentationData, error: presentationError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('presentations').select('*').eq('id', id).single();\n        if (presentationError) {\n            if (presentationError.code === 'PGRST116') {\n                return null; // Not found\n            }\n            throw new Error(`Failed to get presentation: ${presentationError.message}`);\n        }\n        const { data: slidesData, error: slidesError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('slides').select('*').eq('presentation_id', id).order('slide_number');\n        if (slidesError) {\n            throw new Error(`Failed to get slides: ${slidesError.message}`);\n        }\n        return this.mapToPresentation(presentationData, slidesData || []);\n    }\n    // Slide operations\n    async createSlide(slideData) {\n        const slideId = crypto.randomUUID();\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('slides').insert({\n            id: slideId,\n            presentation_id: slideData.presentationId,\n            slide_number: slideData.slideNumber,\n            title: slideData.title,\n            content: slideData.content,\n            generation_status: {\n                text: 'completed',\n                image: 'pending',\n                audio: 'pending'\n            },\n            ai_prompts: {\n                imagePrompt: slideData.imagePrompt,\n                audioScript: slideData.content\n            }\n        });\n        if (error) {\n            throw new Error(`Failed to create slide: ${error.message}`);\n        }\n        // Update total slide count\n        await this.updateSlideCount(slideData.presentationId);\n        return slideId;\n    }\n    async updateSlideMedia(slideId, imageUrl, audioUrl) {\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (imageUrl) {\n            updateData.image_url = imageUrl;\n        }\n        if (audioUrl) {\n            updateData.audio_url = audioUrl;\n        }\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('slides').update(updateData).eq('id', slideId);\n        if (error) {\n            throw new Error(`Failed to update slide media: ${error.message}`);\n        }\n    }\n    async updateSlideStatus(slideId, statusType, status) {\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        // Get current status\n        const { data, error: fetchError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('slides').select('generation_status').eq('id', slideId).single();\n        if (fetchError) {\n            throw new Error(`Failed to fetch slide status: ${fetchError.message}`);\n        }\n        const currentStatus = data.generation_status || {};\n        currentStatus[statusType] = status;\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('slides').update({\n            generation_status: currentStatus,\n            updated_at: new Date().toISOString()\n        }).eq('id', slideId);\n        if (error) {\n            throw new Error(`Failed to update slide status: ${error.message}`);\n        }\n    }\n    // Fallback deck operations\n    async getFallbackDecks(topic) {\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        let query = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('fallback_decks').select('*').eq('is_active', true);\n        if (topic) {\n            query = query.ilike('topic', `%${topic}%`);\n        }\n        const { data, error } = await query.order('usage_count').limit(5);\n        if (error) {\n            throw new Error(`Failed to get fallback decks: ${error.message}`);\n        }\n        return data?.map(this.mapToFallbackDeck) || [];\n    }\n    async incrementFallbackUsage(id) {\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        // First get current usage count\n        const { data: currentData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('fallback_decks').select('usage_count').eq('id', id).single();\n        const currentCount = currentData?.usage_count || 0;\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('fallback_decks').update({\n            usage_count: currentCount + 1\n        }).eq('id', id);\n        if (error) {\n            throw new Error(`Failed to increment fallback usage: ${error.message}`);\n        }\n    }\n    // Private helper methods\n    async updateSlideCount(presentationId) {\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error('Supabase admin client not configured');\n        }\n        const { count, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('slides').select('*', {\n            count: 'exact',\n            head: true\n        }).eq('presentation_id', presentationId);\n        if (error) {\n            throw new Error(`Failed to count slides: ${error.message}`);\n        }\n        const { error: updateError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('presentations').update({\n            total_slides: count || 0\n        }).eq('id', presentationId);\n        if (updateError) {\n            throw new Error(`Failed to update slide count: ${updateError.message}`);\n        }\n    }\n    mapToPresentation(presentationData, slidesData) {\n        return {\n            id: presentationData.id,\n            title: presentationData.title,\n            status: presentationData.status,\n            createdAt: new Date(presentationData.created_at),\n            updatedAt: new Date(presentationData.updated_at),\n            userId: presentationData.user_id,\n            totalSlides: presentationData.total_slides,\n            generationTimeMs: presentationData.generation_time_ms,\n            errorMessage: presentationData.error_message,\n            metadata: presentationData.metadata || {},\n            slides: slidesData.map(this.mapToSlide)\n        };\n    }\n    mapToSlide(slideData) {\n        return {\n            id: slideData.id,\n            presentationId: slideData.presentation_id,\n            slideNumber: slideData.slide_number,\n            title: slideData.title,\n            content: slideData.content,\n            imageUrl: slideData.image_url,\n            audioUrl: slideData.audio_url,\n            generationStatus: slideData.generation_status || {\n                text: 'pending',\n                image: 'pending',\n                audio: 'pending'\n            },\n            aiPrompts: slideData.ai_prompts || {},\n            createdAt: new Date(slideData.created_at),\n            updatedAt: new Date(slideData.updated_at)\n        };\n    }\n    mapToFallbackDeck(data) {\n        return {\n            id: data.id,\n            topic: data.topic,\n            title: data.title,\n            slides: data.slides,\n            isActive: data.is_active,\n            usageCount: data.usage_count,\n            createdAt: new Date(data.created_at)\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/database.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/fallback-manager.ts":
/*!******************************************!*\
  !*** ./src/services/fallback-manager.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackManager: () => (/* binding */ FallbackManager)\n/* harmony export */ });\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database */ \"(rsc)/./src/services/database.ts\");\n\nclass FallbackManager {\n    constructor(){\n        this.db = new _database__WEBPACK_IMPORTED_MODULE_0__.DatabaseService();\n    }\n    async getFallbackPresentation(topic) {\n        // Try to find a relevant fallback deck\n        const fallbackDecks = await this.db.getFallbackDecks(topic);\n        let selectedDeck;\n        if (fallbackDecks.length === 0) {\n            // No fallback decks found, create a generic one\n            selectedDeck = this.createGenericFallbackDeck(topic);\n        } else {\n            // Select the least used fallback deck\n            selectedDeck = fallbackDecks[0];\n            // Increment usage count\n            try {\n                await this.db.incrementFallbackUsage(selectedDeck.id);\n            } catch (error) {\n                console.error('Failed to increment fallback usage:', error);\n            }\n        }\n        // Convert fallback deck to presentation format\n        return this.convertFallbackToPresentation(selectedDeck);\n    }\n    createGenericFallbackDeck(topic) {\n        const slides = [\n            {\n                slideNumber: 1,\n                title: `Introduction to ${topic}`,\n                content: `Welcome to this presentation about ${topic}. We'll explore the key concepts and insights in this area.`,\n                imageUrl: 'https://via.placeholder.com/800x600/4F46E5/FFFFFF?text=Introduction',\n                audioUrl: ''\n            },\n            {\n                slideNumber: 2,\n                title: 'Key Concepts',\n                content: `Let's dive into the fundamental concepts that make ${topic} important and relevant in today's context.`,\n                imageUrl: 'https://via.placeholder.com/800x600/059669/FFFFFF?text=Key+Concepts',\n                audioUrl: ''\n            },\n            {\n                slideNumber: 3,\n                title: 'Applications and Examples',\n                content: `Here are some practical applications and real-world examples of ${topic} that demonstrate its value.`,\n                imageUrl: 'https://via.placeholder.com/800x600/DC2626/FFFFFF?text=Applications',\n                audioUrl: ''\n            },\n            {\n                slideNumber: 4,\n                title: 'Conclusion',\n                content: `To conclude, ${topic} represents an important area with significant potential for future development and applications.`,\n                imageUrl: 'https://via.placeholder.com/800x600/D97706/FFFFFF?text=Conclusion',\n                audioUrl: ''\n            }\n        ];\n        return {\n            id: crypto.randomUUID(),\n            topic: this.categorizeTopicGeneric(topic),\n            title: `${topic} - Overview`,\n            slides,\n            isActive: true,\n            usageCount: 0,\n            createdAt: new Date()\n        };\n    }\n    convertFallbackToPresentation(fallbackDeck) {\n        const presentationId = crypto.randomUUID();\n        const now = new Date();\n        const slides = fallbackDeck.slides.map((fallbackSlide)=>({\n                id: crypto.randomUUID(),\n                presentationId: presentationId,\n                slideNumber: fallbackSlide.slideNumber,\n                title: fallbackSlide.title,\n                content: fallbackSlide.content,\n                imageUrl: fallbackSlide.imageUrl,\n                audioUrl: fallbackSlide.audioUrl,\n                generationStatus: {\n                    text: 'completed',\n                    image: 'completed',\n                    audio: fallbackSlide.audioUrl ? 'completed' : 'failed'\n                },\n                aiPrompts: {\n                    imagePrompt: `Visual representation of: ${fallbackSlide.title}`,\n                    audioScript: fallbackSlide.content\n                },\n                createdAt: now,\n                updatedAt: now\n            }));\n        return {\n            id: presentationId,\n            title: fallbackDeck.title,\n            status: 'completed',\n            createdAt: now,\n            updatedAt: now,\n            userId: undefined,\n            slides,\n            totalSlides: slides.length,\n            generationTimeMs: 0,\n            errorMessage: undefined,\n            metadata: {\n                // Mark as fallback for transparency\n                isFallback: true,\n                fallbackDeckId: fallbackDeck.id,\n                fallbackReason: 'API quota exceeded'\n            }\n        };\n    }\n    categorizeTopicGeneric(topic) {\n        const topicLower = topic.toLowerCase();\n        // Simple keyword matching for categorization\n        if (topicLower.includes('tech') || topicLower.includes('ai') || topicLower.includes('software') || topicLower.includes('computer')) {\n            return 'Technology';\n        }\n        if (topicLower.includes('business') || topicLower.includes('market') || topicLower.includes('startup') || topicLower.includes('entrepreneur')) {\n            return 'Business';\n        }\n        if (topicLower.includes('education') || topicLower.includes('learn') || topicLower.includes('school') || topicLower.includes('university')) {\n            return 'Education';\n        }\n        if (topicLower.includes('science') || topicLower.includes('research') || topicLower.includes('study')) {\n            return 'Science';\n        }\n        if (topicLower.includes('health') || topicLower.includes('medical') || topicLower.includes('wellness')) {\n            return 'Health';\n        }\n        if (topicLower.includes('environment') || topicLower.includes('climate') || topicLower.includes('sustainability')) {\n            return 'Environment';\n        }\n        if (topicLower.includes('art') || topicLower.includes('design') || topicLower.includes('creative')) {\n            return 'Arts';\n        }\n        if (topicLower.includes('history') || topicLower.includes('past') || topicLower.includes('historical')) {\n            return 'History';\n        }\n        // Default category\n        return 'General';\n    }\n    async checkApiQuotas() {\n        // For development, always allow AI generation unless explicitly disabled\n        // In production, this would check actual API quotas\n        const forceUseFallback = process.env.FORCE_USE_FALLBACK === 'true';\n        if (forceUseFallback) {\n            console.log('Force fallback is enabled via environment variable');\n            return {\n                hasQuotaAvailable: false,\n                limitedServices: [\n                    'gemini'\n                ]\n            };\n        }\n        // For development/testing, assume quotas are available\n        // This allows us to test the actual AI services\n        console.log('API quotas check: All services available for development');\n        return {\n            hasQuotaAvailable: true,\n            limitedServices: []\n        };\n    }\n    async shouldUseFallback(topic) {\n        const quotaStatus = await this.checkApiQuotas();\n        if (!quotaStatus.hasQuotaAvailable) {\n            return {\n                useFallback: true,\n                reason: `API quota exceeded for services: ${quotaStatus.limitedServices.join(', ')}`\n            };\n        }\n        // Check for other conditions that might trigger fallback\n        // e.g., service availability, response time, etc.\n        return {\n            useFallback: false\n        };\n    }\n    async createDefaultFallbackDecks() {\n        // This method would be used to seed the database with default fallback decks\n        const defaultDecks = [\n            this.createTechnologyFallbackDeck(),\n            this.createBusinessFallbackDeck(),\n            this.createEducationFallbackDeck()\n        ];\n        // In a real implementation, you'd insert these into the database\n        console.log('Default fallback decks created:', defaultDecks.length);\n    }\n    createTechnologyFallbackDeck() {\n        return {\n            id: crypto.randomUUID(),\n            topic: 'Technology',\n            title: 'Technology Overview',\n            slides: [\n                {\n                    slideNumber: 1,\n                    title: 'Introduction to Technology',\n                    content: 'Technology shapes our world in countless ways, from the devices we use daily to the systems that power our economy.',\n                    imageUrl: 'https://via.placeholder.com/800x600/4F46E5/FFFFFF?text=Technology',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 2,\n                    title: 'Digital Transformation',\n                    content: 'Organizations worldwide are embracing digital transformation to stay competitive and meet evolving customer expectations.',\n                    imageUrl: 'https://via.placeholder.com/800x600/059669/FFFFFF?text=Digital+Transformation',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 3,\n                    title: 'Innovation and Impact',\n                    content: 'Technological innovation continues to drive progress, creating new opportunities and solving complex challenges.',\n                    imageUrl: 'https://via.placeholder.com/800x600/DC2626/FFFFFF?text=Innovation',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 4,\n                    title: 'Future Outlook',\n                    content: 'The future of technology holds immense potential, with emerging trends that will reshape how we live and work.',\n                    imageUrl: 'https://via.placeholder.com/800x600/D97706/FFFFFF?text=Future',\n                    audioUrl: ''\n                }\n            ],\n            isActive: true,\n            usageCount: 0,\n            createdAt: new Date()\n        };\n    }\n    createBusinessFallbackDeck() {\n        return {\n            id: crypto.randomUUID(),\n            topic: 'Business',\n            title: 'Business Fundamentals',\n            slides: [\n                {\n                    slideNumber: 1,\n                    title: 'Business Strategy',\n                    content: 'Successful businesses are built on solid strategies that align resources with market opportunities and customer needs.',\n                    imageUrl: 'https://via.placeholder.com/800x600/7C3AED/FFFFFF?text=Strategy',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 2,\n                    title: 'Market Analysis',\n                    content: 'Understanding your market is crucial for making informed decisions and identifying growth opportunities.',\n                    imageUrl: 'https://via.placeholder.com/800x600/059669/FFFFFF?text=Market+Analysis',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 3,\n                    title: 'Execution Excellence',\n                    content: 'Great strategies must be backed by excellent execution to achieve sustainable business success.',\n                    imageUrl: 'https://via.placeholder.com/800x600/DC2626/FFFFFF?text=Execution',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 4,\n                    title: 'Growth and Scale',\n                    content: 'Scaling a business requires careful planning, resource allocation, and continuous adaptation to market changes.',\n                    imageUrl: 'https://via.placeholder.com/800x600/D97706/FFFFFF?text=Growth',\n                    audioUrl: ''\n                }\n            ],\n            isActive: true,\n            usageCount: 0,\n            createdAt: new Date()\n        };\n    }\n    createEducationFallbackDeck() {\n        return {\n            id: crypto.randomUUID(),\n            topic: 'Education',\n            title: 'Education and Learning',\n            slides: [\n                {\n                    slideNumber: 1,\n                    title: 'The Learning Process',\n                    content: 'Learning is a continuous journey that involves acquiring knowledge, developing skills, and applying insights.',\n                    imageUrl: 'https://via.placeholder.com/800x600/4F46E5/FFFFFF?text=Learning',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 2,\n                    title: 'Modern Education Methods',\n                    content: 'Contemporary education embraces diverse teaching methods, technology integration, and personalized learning approaches.',\n                    imageUrl: 'https://via.placeholder.com/800x600/059669/FFFFFF?text=Modern+Education',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 3,\n                    title: 'Skills Development',\n                    content: 'Focus on developing both hard and soft skills prepares learners for success in an ever-changing world.',\n                    imageUrl: 'https://via.placeholder.com/800x600/DC2626/FFFFFF?text=Skills',\n                    audioUrl: ''\n                },\n                {\n                    slideNumber: 4,\n                    title: 'Lifelong Learning',\n                    content: 'In today\\'s rapidly evolving landscape, lifelong learning has become essential for personal and professional growth.',\n                    imageUrl: 'https://via.placeholder.com/800x600/D97706/FFFFFF?text=Lifelong+Learning',\n                    audioUrl: ''\n                }\n            ],\n            isActive: true,\n            usageCount: 0,\n            createdAt: new Date()\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/fallback-manager.ts\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?3713":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?8e41":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/google-auth-library","vendor-chunks/uuid","vendor-chunks/ws","vendor-chunks/gaxios","vendor-chunks/jws","vendor-chunks/debug","vendor-chunks/json-bigint","vendor-chunks/google-logging-utils","vendor-chunks/https-proxy-agent","vendor-chunks/gcp-metadata","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/agent-base","vendor-chunks/node-fetch","vendor-chunks/@google","vendor-chunks/supports-color","vendor-chunks/safe-buffer","vendor-chunks/ms","vendor-chunks/jwa","vendor-chunks/has-flag","vendor-chunks/gtoken","vendor-chunks/extend","vendor-chunks/buffer-equal-constant-time","vendor-chunks/bignumber.js","vendor-chunks/base64-js"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpresentations%2Froute&page=%2Fapi%2Fpresentations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpresentations%2Froute.ts&appDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cazeta%5CDocuments%5CProjects%5Cspeakdeck-build%5Capps%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();